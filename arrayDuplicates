package practice;

import java.util.HashSet;
import java.util.Hashtable;
import java.util.Map.Entry;
import java.util.Set;

public class ArrayDuplicates {
	
	public static void main(String[] args) {
		//Given an integer array nums, 
		//return true if any value appears at least twice in the array, and return false if every element is distinct.
		int arr[] = {3,6,2, 1, 10, 29, 3, 6};
		returnifDuplicatesExist(arr);
		returnifDuplicatesExist2(arr);
		returnifDuplicatesExist3(arr);
	}
	
	public static void returnifDuplicatesExist(int nums[]) {
//		time complexity - O(N^2)
		Set<Integer> newset = new HashSet<>();
		for(int i = 0; i < nums.length; i++) {
			newset.add(nums[i]);
		}
		if(newset.size() < nums.length)
			System.out.println("Duplicates found");
		else
			System.out.println("No Duplicates");
	}
	
	public static void returnifDuplicatesExist2(int nums[]) {
		Set<Integer> newset = new HashSet<>();
		for(int i = 0; i < nums.length; i++) {
			if(newset.add(nums[i]) == false) { //add method of hash set returns false if we try to add duplicate element.
				System.out.println("Duplicates found");
				break;
			}
		}
	}
	
	//using hashtable to print duplicate elements
	public static void returnifDuplicatesExist3(int nums[]) {
		Hashtable<Integer, Integer> newTable = new Hashtable<>();
		for(int i = 0; i < nums.length; i++) {
			Integer count = newTable.get(nums[i]);
			if(count == null)
				newTable.put(nums[i], 1);
			else
				newTable.put(nums[i], ++count);	
		}
		
		Set<Entry<Integer, Integer>> newSet = newTable.entrySet();
		for(Entry<Integer, Integer> item : newSet) {
			if(item.getValue() > 1)
			 System.out.println("Duplicates found, the element is " + item.getKey() + " and it's repeated for " + item.getValue() + " times");
		}
	}
}
